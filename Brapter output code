/* This code is developed to operate the 'Braille Embosser'. Braille embosser is a custom made
printer that reads the SD card and embossses the characters in Braille language.
Two stepper motors used to traverse the punching head along  X and Y axes. A servo motor is used 
to punch holes on the paper to emboss the braille characters on the paper along the Z axis.

The code works as follows:
1)  initialize the SD card
2) open the file. note that only one file can be open at a time,
  so you have to close this one before opening another.
3) open the file for reading:
  Enter the file name that contains the characters to be printed 
  If the file is opened successfully, read character by character and store it in an array and close the file 
4) Punch the characters on the paper row by row; 30 characters per line 
  Braille characters have 6 dots as shown- .. row 1   This algorithm prints the characters row by row.
                                           .. row 2
                                           .. row 3

*/



/*
 SD card is attached to SPI bus as follows:
 * MOSI - pin 11
 * MISO - pin 12
 * CLK - pin 13
 * CS - pin 4
 */
 

#include <SPI.h>
#include <SD.h>


File myFile;
char a[100];
int i,j,n;
float b;
void MOVE(void);
void NEXTCHAR(void);
void NEXTROW(void);
void NEXTLINE(void);
void PUNCH(void);
void forward(void);
void backward(void); 
void stopped(void);
int dirpin1 = A5; //motor1 below plank 
int stepin1 =A4;
int dirpin2 = 6; //motor2 above plank
int stepin2 =7;
int rightforward = 2;
int rightbackward = 3;
int Enable = 5;
int pwm = 150;
int count=0;
int number=0;
void longmove(void);

void setup() 
{

/*Declare the pins used to operate the stepper motors*/
  pinMode(dirpin1,OUTPUT);
  pinMode(dirpin2,OUTPUT);
  pinMode(stepin1,OUTPUT);
  pinMode(stepin2,OUTPUT);
  pinMode(rightforward,OUTPUT);
  pinMode(rightbackward,OUTPUT);
  pinMode(Enable,OUTPUT);
  
 analogWrite(Enable,pwm);
 Serial.begin(9600);
 while (!Serial) {
    // wait for serial port to connect. 
  }


  Serial.print("Initializing SD card...");
  
  /* initialize the SD card*/
  if (!SD.begin(4)) 
  {
    Serial.println("initialization failed!"); 
    return;
  }
  Serial.println("initialization done.");

 /* open the file. note that only one file can be open at a time,
  so you have to close this one before opening another. */


  /*open the file for reading:*/
  myFile = SD.open("Input_File.txt");/* Enter the file name that contains the characters to be printed */
  /*If the file is opened successfully, read character by character and store it in an array and close the file */
  if (myFile) 
  {
    
    // read from the file until there's nothing else in it:
    i=0;
    while (myFile.available())
    {
    a[i] = myFile.read();
      Serial.write(a[i]);
      i++;
    }
    // close the file:
    myFile.close();
  }
  else
  {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt");

  }
  
  /*Punch the characters on the paper row by row; 30 characters per line 
  Braille characters have 6 dots as shown- .. row 1   This algorithm prints the characters row by row.
                                           .. row 2
                                           .. row 3
  
  */
  for(n=0;n<i;n=n+8) 
  {
    for(j=n;j<n+8;j++)
    {
      if(a[j]=='A'||a[j]=='B'||a[j]=='E'||a[j]=='H'||a[j]=='K'||a[j]=='L'||a[j]=='O'||a[j]=='R'||a[j]=='U'||a[j]=='V'||a[j]=='Z')
      {
        
        PUNCH();
        Serial.print("a 1");
        MOVE();
        NEXTCHAR();
      }
      if(a[j]=='C'||a[j]=='D'||a[j]=='F'||a[j]=='G'||a[j]=='M'||a[j]=='N'||a[j]=='P'||a[j]=='Q'||a[j]=='X'||a[j]=='Y')
      {
        PUNCH();
         Serial.print("c 1");
        MOVE();
        PUNCH();
         Serial.print("c 1");
       NEXTCHAR();
      }
      if(a[j]=='I'||a[j]=='J'||a[j]=='S'||a[j]=='T'||a[j]=='W')
      {  MOVE();
        PUNCH();
      Serial.print("i 1");
        NEXTCHAR();
      }
      if(a[j]==' ')
      {
      MOVE();
      NEXTCHAR();
      }
    }
    NEXTROW();
    for(j=n;j<n+8;j++)//row2
    {
      if(a[j]=='A'||a[j]=='C'||a[j]=='K'||a[j]=='M'||a[j]=='U'||a[j]=='X')
    {
      MOVE();
      NEXTCHAR();
    }
    if(a[j]=='B'||a[j]=='F'||a[j]=='I'||a[j]=='L'||a[j]=='P'||a[j]=='S'||a[j]=='V')
   { 
    PUNCH();
     Serial.print("b 2");
    MOVE();
    NEXTCHAR();
   }
    if(a[j]=='D'||a[j]=='E'||a[j]=='N'||a[j]=='O'||a[j]=='Y'||a[j]=='Z')
  {
  
  MOVE();
  PUNCH();
   Serial.print("d 2");
  NEXTCHAR();
  }
  if(a[j]=='G'||a[j]=='H'||a[j]=='J'||a[j]=='Q'||a[j]=='R'||a[j]=='T'||a[j]=='W')
  {
  PUNCH();
   Serial.print("g 2");
  MOVE();
  PUNCH();
   Serial.print("g 2");
  NEXTCHAR();
  }
  if(a[j]==' ')
  {
  MOVE();
  NEXTCHAR();
  }
}
NEXTROW();
  for(j=n;j<n+8;j++)//row3
  {
  if(a[j]=='A'||a[j]=='B'||a[j]=='C'||a[j]=='D'||a[j]=='E'||a[j]=='F'||a[j]=='G'||a[j]=='H'||a[j]=='I'||a[j]=='J')
  {
    MOVE();
    NEXTCHAR();
  }
   if(a[j]=='K'||a[j]=='L'||a[j]=='M'||a[j]=='N'||a[j]=='O'||a[j]=='P'||a[j]=='Q'||a[j]=='R'||a[j]=='S'||a[j]=='T')
  {
   PUNCH();
    Serial.print("k 3");
   MOVE();
   NEXTCHAR();
  }
  if(a[j]=='U'||a[j]=='V'||a[j]=='X'||a[j]=='Y'||a[j]=='Z')
  {
   PUNCH();
    Serial.print("u 3");
   MOVE();
   PUNCH();
    Serial.print("u 3");
   NEXTCHAR();
  }
  if(a[j]=='W')
  {
  MOVE();
  PUNCH();
   Serial.print("w 3");
  NEXTCHAR();
  }
  if(a[j]==' ')
  {
  MOVE();
  NEXTCHAR();
  }
  }
NEXTLINE();
}//end n
}

void MOVE()
{
    for(b=0;b<(33*2);b++)//motor 2
    {
      digitalWrite(dirpin2,LOW);//////////////////////////high or low
      digitalWrite(stepin2,LOW);
      delayMicroseconds(500);
      digitalWrite(stepin2,HIGH);
   
    }
    count++;
    delay(200);
}  
void NEXTCHAR()
{
    for(b=0;b<(37*2);b++)//m2
    {
      digitalWrite(dirpin2,LOW);//////////////////
      digitalWrite(stepin2,LOW);
      delayMicroseconds(500);
      digitalWrite(stepin2,HIGH);
    }number++;
    delay(200);
}  
void NEXTROW()
{
  for(b=0;b<(80*3);b++)//motor1
    {
      digitalWrite(dirpin1,LOW);/////////////////////
      digitalWrite(stepin1,LOW);
      delayMicroseconds(500);
      digitalWrite(stepin1,HIGH);
    }
    longmove();
  
}
void NEXTLINE()
{ for(b=0;b<333*3;b++)//m1
    {
      digitalWrite(dirpin1,LOW);//////////////////////////////
      digitalWrite(stepin1,LOW);
      delayMicroseconds(500);
      digitalWrite(stepin1,HIGH);
    } 
    longmove();
}

void longmove()
{ for(b=0;b<(((33*2*count)+(37*2*number))-30);b++)//motor 2
    {
      digitalWrite(dirpin2,HIGH);//////////////////////////high or low
      digitalWrite(stepin2,LOW);
      delayMicroseconds(500);
      digitalWrite(stepin2,HIGH);
   
    }
    count=0;
    number=0;
  
}

void forward()
{
  
  digitalWrite( rightforward, LOW );
  
  digitalWrite( rightbackward, HIGH );
  
  
}
void backward()
{
  digitalWrite( rightforward, HIGH);
  
  digitalWrite( rightbackward, LOW);
  
  
}
void stopped()
{
  digitalWrite(rightforward,LOW);
  digitalWrite(rightbackward,LOW);
}
void PUNCH()
{
  analogWrite(Enable,pwm);

  forward();
  delay(400); 
  backward();
  delay(400);
 
  stopped();
  delay(200);
}

void loop()
{
  
  for(b=0;b<((384*4)-37);b++)//m2
    {
      digitalWrite(dirpin2,HIGH);//////////////////////////////////////
      digitalWrite(stepin2,LOW);
      delayMicroseconds(500);
      digitalWrite(stepin2,HIGH);
    }
    punch();
for(b=0;b<((384*4)-37);b++)//m2
    {
      digitalWrite(dirpin2,LOW);//////////////////////////////////////
      digitalWrite(stepin2,LOW);
      delayMicroseconds(500);
      digitalWrite(stepin2,HIGH);
    }

     punch();
}




 
